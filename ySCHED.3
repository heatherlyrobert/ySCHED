.TH ySCHED 3 2011-Aug "linux" "application programming interface"

.SH NAME
.B ySCHED
\- simple, elegant, and powerful kernighan scheduling grammar

.SH PATRON
.B eunomia-horae
(good order) goddess of law and appropriate time

.SH IMAGERY
beautiful, rose-bloomed maiden, sister of justice, peace, and fortune

.SH SUMMARY
ySCHED is a simple, elegant, powerful, and extended kernighan scheduling
grammar that builds on the classic cron implementation to enable support of
all schedule-based application (like calendaring).

.SH CRAZY, NAIVE, DOG-FOODING, BOOT-STRAPPING ANIMAL
i am not competing to be the best.  i created this to learn deeply and own
every byte.  it's optimized for transparency and debugging.  if i wanted
awesome, fast, and cutting-edge, i'd use yours ;)

.SH DOCUMENTATION FILES (see also)
.nf  
.B ySCHED (3)··········interfacing applications with library
ySCHED (5)          user files, data streams, and configuration
ySCHED (7)          decision rationale, scope, and objectives

.SH TABLE OF CONTENTS
.nf  
a) synopsis         standard public function overview
b) heads-up         upfront notes
c) baseline         recommended base usage
d) alternate        other ways to access
e) debugging        external testing and debugging

.SH A) SYNOPSIS
.nf
---(header)------------------------------------
.sp
.B #include  <ySCHED.h>
.sp
---(baseline 4)--------------------------------
.sp
.BI "char  ySCHED_date     (char   " "a_yr" ", char   " "a_mo" ", char   " "a_dy" ");"
.sp
.BI "char  ySCHED_create   (void **" "r_sched" ", cchar *" "a_recd" ");"
.sp
.BI "char  ySCHED_test     (void  *" "a_sched" ", char " "a_hr" ", char " "a_mn" ", char *" "r_note" ");"
.sp
.BI "char  ySCHED_free     (void **" "r_sched" ");"
.sp
---(alternate 2)-------------------------------
.sp
.BI "char  ySCHED_epoch    (long   " "a_epoch" ");"
.sp
.BI "char  ySCHED_teste    (void  *" "a_sched" ", long a_epoch" ");"
.sp
---(debugging 4)-------------------------------
.sp
.BI "char* ySCHED_version  (void);"
.sp
.BI "char  ySCHED_feedback (int *" "r_line" ", char *" "r_sect" ", char *" "r_focus" ","
.BI " " "                        " "char *" "r_issue" ", int *" "r_beg" ", int *" "r_len" ", char *" "r_fancy" ");"
.sp
.BI "char  ySCHED_details  (char *" "a_min" ", char *" "a_hrs" ", char *" "a_dys" ", char *" "a_mos" ","
.BI " " "                        " "char *" "a_dow" ", char *" "a_wks" ", char *" "a_yrs" ", char *" "a_beg" ","
.BI " " "                        " "char *" "a_end" ", char *" "a_valid" ");"
.sp
.BI "char* ySCHED_raw      (void *" "a_sched" ");"
.sp
---(linking)-----------------------------------
.sp
.B link with -L/usr/local/lib, -lySCHED or -lySCHED_debug
.sp
---(done)--------------------------------------

.SH B) HEADS-UP
ySCHED is pretty standard stuff from an interface standpoint.  notice, arguments
have several different prefixes to aide my debugging...
   a_···   normal (incomming) argument
   r_···   return (outgoing) argument
   b_···   two-way (both incomming and outgoing) argument
   f_···   function pointer as argument

.SH C) BASELINE (4)
ySCHED has a certain flow that allows it to work, here it is ;)

.BI "char  ySCHED_date     (char   " "a_yr" ", char   " "a_mo" ", char   " "a_dy" ");"
.RS 3
necessary to calculate certain parsing statistics,
including the number of days in the month and what day of the week the
month starts on.  it takes three integers...
 - a_yr is since 2000
 - a_mo is 1-12
 - a_dy is 1-n depending on the month
.RE

.BI "char  ySCHED_create   (void **" "r_sched" ", cchar *" "a_recd" ");"
.RS 3
takes the scheduling string part of the input record and creates a schedule
entry, passing a pointer back to the r_sched.  you will need this for the
testing calls later.
.RE

.BI "char  ySCHED_test     (void  *" "a_sched" ", char " "a_hr" ", char " "a_mn" ", ´´´>"
.RS 3
detirmines if a given entry should run at a particular hour and minute.
it takes two integers, combines that information with the ySCHED_data and
schedule record and returns 1/true if it should run.
 - a_hr is 0-23 (military time)
 - a_mn is 0-59
.RE

.BI "char  ySCHED_free     (void **" "r_sched" ");"
.RS 3
simply frees the schedule memory and returns a grounded pointer.
.RE

.SH D) ALTERNATE (2)
two functions that allow the use of an epoch datatime instead of
broken-down date information.

.BI "char  ySCHED_epoch    (long   " "a_epoch" ");"
.RS 3
same as ySCHED_date, but take the date portion of the epoch instead.  it
ignores any time part of the epoch.
.RE

.BI "char  ySCHED_teste    (void  *" "a_sched" ", long a_epoch" ");"
.RS 3
same as ySCHED_test, but take the time portion of the epoch instead.  it
ignores any date part of the epoch.
.RE

.SH E) DEBUGGING (4)
several functions that improve read-time tracing and debugging in the program
without having to resort to yLOG/yURG or other means.

.BI "char *ySCHED_version   (void);"
.RS 3
simply returns a character string with the compiler name, version number,
and version description.  very useful for debugging.
.RE

.BI "char  ySCHED_feedback (int *" "r_line" ", char *" "r_sect" ", ´´´>"
.RS 3
returns full trouble identification informtion about the most recently
created schedule.  all pointers can be null.
.RE

.BI "char  ySCHED_details  (char *" "a_min" ", char *" "a_hrs" ", ´´´>"
.RS 3
returns full human-readable detail about the most recently created schedule.
all pointers can be null.
.RE

.BI "char* ySCHED_raw      (void *" "a_sched" ");"
.RS 3
returns the raw scheduling string as saved, also a helpful tool.
.RE

.SH AUTHOR
jelloshrike at gmail dot com

.SH COLOPHON
this page is part of a documentation package meant to make my use of the
heatherly tools easier and faster

